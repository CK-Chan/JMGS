<style lang='less'>
  .player {
    width: 80%;
    bottom: 0;
    text-align: center;
    padding: 15px calc(10%) 15px;
  }
  .submit {
    position: absolute;
    width: 80%;
    bottom: 0px;
    padding: 15px calc(10%) 2rem;
  }
  .hide {
    display: none;
  }
  .show {
    display: inline;
  }
  .addPadding {
    padding: 2rem auto 2rem;
    text-align: center;
    padding-bottom: 1rem;
  }
  .checkedIcon {
    margin: 0px 10px 0px;
  }
  .flex {
    display: flex;
    flex-direction: row;
  }
  .play-record {
    text-align: left;
    font-size: 16px;
  }
</style>

<template>
  <view class="container">
    <view class="weui-panel weui-panel_access">
      <view class="weui-panel__hd">
        <playrecordbtn></playrecordbtn>
      </view>
    </view>
    <view class="weui-cells__title">当前展出天数限制为：
      <i style="color:{{formData.howLong > 2 ? (formData.howLong  > 5 ? 'red' : 'orange') : 'green'}}">{{formData.howLong}}</i> 天
    </view>
    <view class="weui-cells weui-cells_after-title">
      <view class="weui-cell">
        <view class="weui-cell__bd">时限(天)：</view>
        <view class="weui-cell__ft">
          <!-- remember to set the value with the data in config file, set it dynamically will cause the slider not working -->
          <slider min="1" max="7" @change="changeTime" />
        </view>
      </view>
    </view>
    <view class="weui-cells__title">当前参与人数限制为：
      <i style="color:{{formData.howMany > 150 ? (formData.howMany  > 400 ? 'red' : 'orange') : 'green'}}">{{formData.howMany}}</i>人
    </view>
    <view class="weui-cells weui-cells_after-title">
      <view class="weui-cell">
        <view class="weui-cell__bd">人数限制：</view>
        <view class="weui-cell__ft">
          <slider min="50" max="500" @change="changeAmount" />
        </view>
      </view>
    </view>
    <view class="weui-cells__title">默认为当前地址。范围: {{config.allowedCities}}内。</view>
    <view class="weui-cells weui-cells_after-title">
      <view class="weui-cell">
        <view class="weui-cell__bd">地点限制：</view>
        <view class="weui-cell__ft flex">
          <button type="{{mapPicked}}" plain="true" size="mini" @tap="pickLoc">{{config.beforPosChosed}}</button>
          <view class="checkedIcon {{posChosed}}">
            <icon type="success" size="32" />
          </view>
        </view>
      </view>
    </view>
    <view class="submit weui-flex">
      <button type="warn" plain="true" style="width:40%" @tap="goback">返回</button>
      <button type="primary" style="width:40%" @tap="submit">提交</button>
    </view>
    <mappicker direction="bottom">
      <view class="weui-panel weui-panel_access {{pickerDisplay}}">
        <view class="weui-panel__hd">请在地图中选中展出的位置</view>
        <view class="weui-panel__bd  addPadding">
          <map id="map" longitude="{{config.defaultLongitude}}" latitude="{{config.defaultLatitude}}" controls="{{controls}}" bindcontroltap="controltap" show-location style="width:100%; height:20rem;"></map>
        </view>
        <view class="weui-flex addPadding" style="padding-bottom: 1rem;">
          <button size="mini" @tap="cancelPick" type="default" plain="true" style="width:40%">返回</button>
          <button size="mini" @tap="grabCoordinates" type="primary" plain="true" style="width:40%">选中</button>
        </view>
      </view>
    </mappicker>
  </view>
</template>

<script>
  import wepy from "wepy";
  import MapPicker from "@/components/mappicker";
  import PlayRecordBtn from '@/components/playrecordbtn'
  import request from '@/util/request'
  export default class AfterSpeak extends wepy.page {
    config = {
      navigationBarTitleText: "创建敢说"
    };
    components = {
      mappicker: MapPicker,
      playrecordbtn: PlayRecordBtn
    };
    mixins = [];
    data = {
      pickerDisplay: "hide", //flag to hide the original component
      mapPicked: "warn",
      posChosed: "hide",
      controls: [],
      formData: {
        howLong: 1,
        where: {
          longitude: "",
          latitude: ""
        },
        howMany: 50
      },
      config: null,
      mapCtx: null, //map context
      acCtx: null, // audio context
      color: {
        red: '\"red\"',
        orange: '\"orange\"',
        green: '\"green\"'
      }
    };
    computed = {
      now() {
        return +new Date();
      }
    };
    methods = {
      goback() {
        //返回程序首页 地图
        wx.navigateBack()
      },
      playrecord() {
        //播放录音
        console.info('afterspeak.playrecord 正在播放录音', this.acCtx.src)
        if ("true" === this.playingRecord) {
          this.acCtx.stop();
        } else {
          this.acCtx.play();
        }
      },
      pickLoc() {
        //在小地图中选择展出坐标
        let page = this;
        console.info('afterspeak.pickLoc 准备选择展出坐标');
        this.pickerDisplay = "show";
        this.$invoke("mappicker", "showPopup");
        //add loading toast for safety
        wx.showLoading({
          mask: true
        });
        //在动画结束后加载pin
        setTimeout(() => {
          //hideloading
          wx.hideLoading();
          //get the coordinates of pin pic
          wx
            .createSelectorQuery()
            .select("#map")
            .boundingClientRect(function(rect) {
              // 地图中心 pin
              page.controls.push({
                id: 1,
                iconPath: "../assets/images/pin.png",
                position: {
                  left: rect.width / 2 - 12,
                  top: rect.height / 2 - 24,
                  width: 24,
                  height: 24
                },
                clickable: false
              });

              // locate 图标
              page.controls.push({
                id: 2,
                iconPath: "../assets/images/precision.png",
                position: {
                  left: rect.width - 40,
                  top: rect.height - 40,
                  width: 32,
                  height: 32
                },
                clickable: true
              });
              page.$apply();
            })
            .exec();
        }, 400); // a lucky number
      },
      controltap(e) {
        if(e.controlId === 2) {
          this.mapCtx.moveToLocation();
        }
      },
      cancelPick() {
        //小地图选取中点击返回按钮
        console.info('afterspeak.cancelPick 取消选择展出坐标');
        this.pickerDisplay = "hide";
        this.$invoke("mappicker", "hidePopup");
      },
      grabCoordinates() {
        //抓取所选坐标
        this.pickerDisplay = "hide";
        this.$invoke("mappicker", "hidePopup");
        this.mapPicked = "primary";
        this.config.beforPosChosed = this.config.afterPosChosed;
        //在提交数据formdata中加入所选坐标
        this.mapCtx = this.mapCtx || wx.createMapContext("map");
        let page = this;
        this.mapCtx.getCenterLocation({
          success: function(res) {
            page.formData.where = {
              longitude: res.longitude,
              latitude: res.latitude
            };
            page.posChosed = "show";
            page.$apply();
            console.info('afterspeak.grabCoordinates 选择展出坐标', JSON.stringify(page.formData.where));
          },
          fail: function(res) {
            console.error(res);
          }
        });
      },
      submit() {
        let page = this
        wx.showLoading({
          mask: true
        });
        // 上传前获取上传授权
        new Promise((resolve, reject) => {
          wx.request({
            url: page.config.ticketTokenUrl,
            header: {
              'authorization': page.$parent.globalData.token
            },
            success(res) {
              console.info('afterspeak.submit 上传授权成功');
              if (res.error) {
                console.error('afterspeak.submit 错误发生：' + res.error);
                reject(res.error)
              } else if (res.data.ticketToken) {
                resolve(res.data.ticketToken)
              }
              reject(res.error)
            },
            fail(res) {
              reject(res)
            }
          })
        }).then(token => {
          const owner = page.$parent.globalData.userInfo.id;
          const filename = 'ticket/' + owner + '-' + Date.now();
          console.info('afterspeak.submit 准备上传文件');
          request.upload(page.acCtx.src,
            (data) => {
              // callback response, 返回的是string， 坑死老子了
              // console.log(typeof data);
              const obj = JSON.parse(data);
              if (obj.ticketId) {
                console.info('afterspeak.submit 上传成功， callback调用成功，返回ticketId：' + obj.ticketId);
                page.$preload('ticketId', obj.ticketId);
                page.$redirect('display');
              } else {
                throw new Error(obj)
              }
            },
            (error) => {
              console.error('afterspeak.submit 文件上传失败：');
              console.log(error);
              wx.navigateBack({
                success() {
                  page.config.showError('Err302', error);
                }
              });
            }, {
              region: page.config.bucketRegionUrl, //
              token: token, // token
              domain: page.config.bucketUrl, // 对象存储服务器
              key: filename,
            },
            (progress) => {
              console.info('afterspeak.submit 文件上传进度：' + progress.progress);
            }, {
              //添加ticket
              "x:owner": owner,
              "x:audioUrl": page.config.bucketUrl + filename,
              "x:duration": page.formData.howLong * 1000 * 60 * 60 * 24,
              "x:amount": page.formData.howMany,
              "x:location": JSON.stringify([page.formData.where.longitude, page.formData.where.latitude]),
            }
          );
        }).catch(error => {
          console.error('afterspeak.submit 上传ticket提交失败：', error);
          wx.navigateBack({
            success() {
              page.config.showError('Err303', error);
            }
          });
        })
      },
      changeTime(e) {
        this.formData.howLong = e.detail.value;
        console.info('afterspeak.changeTime:', this.formData);
      },
      changeAmount(e) {
        this.formData.howMany = e.detail.value;
        console.info('afterspeak.changeAmount:', this.formData.howMany);
      }
    };
    events = {};
    onLoad(params, data) {
      console.info('afterspeak.onLoad');
      let page = this;
      this.mapCtx = this.mapCtx || wx.createMapContext("map");
      this.config = this.$parent.globalData.config;
      //取得录音文件地址
      this.acCtx = this.$parent.globalData.acCtx
      this.acCtx.src = data.preload.recordPath;
      //get current position
      wx.getLocation({
        type: "gcj02",
        success: function(res) {
          page.formData.where = {
            longitude: res.longitude,
            latitude: res.latitude
          };
        },
        fail: function(err) {
          page.config.showError('Err301', err);
        }
      });
    }
    onReady() {}
    onHide() {
      console.info('afterspeak onHide')
      this.acCtx.stop()
    }
    onUnload() {
      console.info('afterspeak onUnload')
      this.acCtx.stop()
    }
  }
</script>
