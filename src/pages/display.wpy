<style lang='less'>

</style>

<template>
  <view>
    <userinfo :nickname.sync="ticketOwnerNickName" :avatarSrc.sync="ticketOwnerAvatarUrl" size="small">
      <view slot="content" class="weui-panel__hd" style="width:70%">
        <playrecordbtn></playrecordbtn>
      </view>
    </userinfo>
    <repeat for="{{challenges}}" item="item">
      <ticketdetail :details.sync="item" @tap.user="tapPlay"></ticketdetail>
    </repeat>
    <roundbutton class="" name="敢" shine="true" @tap.user="tapBtn"></roundbutton>
    <view class="weui-footer {{onBottom ? '' : 'hide'}}">
      <view class="weui-footer__text">———— 到底啦， 没有更多啦 —————</view>
    </view>
  </view>
</template>


<script>
  import wepy from "wepy";
  import TicketDetail from "@/components/ticketdetail";
  import RoundButton from "@/components/roundbutton";
  import PlayRecordBtn from '@/components/playrecordbtn'
  import UserInfo from "@/components/userinfo";
  import request from '@/util/request'
  export default class Display extends wepy.page {
    config = {
      navigationBarTitleText: 'de 敢说',
      enablePullDownRefresh: true
    };
    components = {
      ticketdetail: TicketDetail,
      roundbutton: RoundButton,
      playrecordbtn: PlayRecordBtn,
      userinfo: UserInfo,
    };
    mixins = [];
    data = {
      challenges: [
        // challengeId: '',
        // challengeOwnerNickName: '',
        // createTime: '',
        // challengeOwnerAvatarUrl: '',
        // posterUrl: '',
        // videoUrl: '',
        // isVertical: '',
        // self: '',
        // timeFromNow: '',
      ],
      currentPage: 1,
      ticketId: '',
      ticketOwnerNickName: '',
      ticketOwnerAvatarUrl: '',
      audioUrl: '',
      onBottom: false,
      config: null
    };
    computed = {
      now() {
        return +new Date();
      }
    };
    methods = {
      tapPlay(url) {
        this.$preload('videoUrl', url);
        this.$navigate('playvideo');
      },
      async tapBtn(e) {
        const page = this;
        try {
          console.log("display.tapBtn@roundbutton : 敢 按钮点击， 准备录制挑战视频");
          const agreed = await new Promise(resolve => {
            // 显示对话框
            wx.showModal({
              title: "提示",
              content: "请用最短的时间完成挑战，否则可能无法上传！",
              success(res) {
                if (res.confirm) {
                  resolve(true)
                } else {
                  resolve(false)
                }
              }
            });
          })
          if (agreed) {
            console.log("display.tapBtn :调用系统camera， 录制视频");
            const videoData = await new Promise(resolve => {
              wx.chooseVideo({
                sourceType: ["camera"],
                compressed: true,
                maxDuration: 30,
                success(res) {
                  console.log("display.tapBtn :已录制视频");
                  resolve(res)
                  // duration
                  // height
                  // size
                  // tempFilePath
                  // width
                },
                fail(error) {
                  page.config.showError('Wrn401');
                  throw new Error('录制视频时出现错误或取消！');
                }
              });
            });
            if (videoData) {
              // 检查视频规格,准备上传
              const challengeToken = await new Promise(resolve => {
                if (videoData.duration > 30 || // 30秒
                  videoData.size > 10485760) { // 10MB
                  console.log('display.tapBtn： 录制挑战视频不符合条件！')
                  wx.showModal({
                    title: '提示',
                    content: '时间限制：30秒，当前为' + videoData.duration.toFixed(2) + '秒。\n' +
                      '大小限制：10MB， 当前' + (videoData.size / 1024 / 1024).toFixed(2) + 'MB。'
                  });
                  throw '';
                } else {
                  // 获取上传token
                  console.log("display.tapBtn : 视频录制成功，准备获取上传授权");
                  wx.showLoading({
                    title: '上传进度  0%',
                    mask: true
                  });
                  wx.request({
                    url: page.$parent.globalData.config.challengeTokenUrl,
                    header: {
                      'authorization': page.$parent.globalData.token
                    },
                    success(res) {
                      console.log('display.tapBtn 获取上传challenge授权成功');
                      if (res.data.challengeToken) {
                        resolve(res.data.challengeToken);
                      }
                      if (res.error) {
                        throw new Error(res.error)
                      }
                    },
                    fail(res) {
                      throw res;
                    }
                  })
                }
              });
              const owner = page.$parent.globalData.userInfo.id;
              const filename = 'challenge/' + owner + '-' + Date.now();
              const filePath = videoData.tempFilePath
              console.log('display.tapBtn  准备上传挑战视频文件');
              const createdChallengeId = await new Promise(resolve => { // 获取创建的challengeId
                const params = {
                  //添加challenge
                  "x:isVertical": String(videoData.height > videoData.width), //参数只支持string
                  "x:owner": owner,
                  "x:posterUrl": page.$parent.globalData.config.bucketUrl + filename + '?vframe/png/offset/0', // 截图参数，jpg,0秒
                  "x:belongTo": page.ticketId,
                  "x:videoUrl": page.$parent.globalData.config.bucketUrl + filename,
                };
                console.warn(params);
                request.upload(filePath,
                  (data) => {
                    const obj = JSON.parse(data);
                    if (obj.challengeId) {
                      console.log('display.tapBtn:  上传成功， callback调用成功，返回challengeId：' + obj.challengeId);
                      //准备载入页面
                      resolve(obj.challengeId);
                    } else {
                      console.log(obj);
                      throw '上传成功，但未正确返回challengeId'
                    }
                  },
                  (error) => {
                    wx.navigateBack({
                      success() {
                        console.log('display.tapBtn 文件上传失败：', error);
                        page.config.showError('Err404', error)
                      }
                    });
                  }, {
                    region: page.$parent.globalData.config.bucketRegionUrl, // 华北区
                    token: challengeToken, // token
                    domain: page.$parent.globalData.config.bucketUrl, // 对象存储服务器
                    key: filename,
                  },
                  (progress) => {
                    console.log('display.tapBtn 文件上传进度：' + progress.progress);
                    wx.showLoading({
                      title: '上传进度  ' + progress.progress + '%',
                      mask: true
                    });
                  },
                  params
                );
              })
              console.log('display.tapBtn : 新的challenge创建成功， id为' + createdChallengeId);
              wx.hideLoading();
              new Promise(resolve => { // request 获取创建后的challengeObj, 这里应当已最前面的challenge的时间戳为信标进行查询。
                request.retrieveData(page, createdChallengeId, 'challenge',
                  page.challenges.length ? {
                    'isUpdate': true,
                    'utilWhen': page.challenges[0].createTime ? page.challenges[0].createTime : ''
                  } : null,
                  data => {
                    resolve(data);
                    console.log('display.tapBtn : 取得id为' + createdChallengeId + '的challenge，准备展示');
                  },
                  error => {
                    throw error;
                  }
                );
              }).then(challenges => {
                console.log(challenges); // 按时间查询，返回的是时间倒序排列的数组
                if (challenges.length) {
                  for (let i = challenges.length - 1; i >= 0; i--) {
                    const data = challenges[i];
                    data.timeFromNow = request.formatTime(parseInt(data.createTime, 10));
                    data.self = page.$parent.globalData.userInfo.avatarUrl === data.challengeOwnerAvatarUrl;
                    page.challenges.splice(0, 0, data);
                    page.$apply();
                  }
                }
              })
            } else {
              throw new Error('录制的视频为空!');
            }
          }
        } catch (error) {
          console.error(error);
          wx.hideLoading();
          page.config.showError('Err405', error)
        }
      }
    };
    events = {};
    onLoad(params, data) {
      const page = this;
      this.config = this.$parent.globalData.config;
      wepy.showLoading({
        mask: true
      });
      const ticketId = data.preload.ticketId;
      //取得ticket内容
      new Promise((resolve, reject) => {
        request.retrieveData(this, ticketId, 'ticket', {
            'page': this.currentPage
          },
          successData => {
            console.info('display.onLoad: 获得数据，准备展示', successData);
            resolve(successData);
            //console.log(page.$parent.globalData.acCtx.src);
          },
          error => {
            reject(error)
          });
      }).then(data => {
        //--------------------赋值页面------------------
        page.ticketId = data.ticketId;
        page.ticketOwnerNickName = data.ticketOwnerNickName;
        wx.setNavigationBarTitle({ title: data.ticketOwnerNickName + ' de敢说'})
        page.ticketOwnerAvatarUrl = data.ticketOwnerAvatarUrl;
        page.audioUrl = data.audioUrl;
        page.$parent.globalData.acCtx.src = data.audioUrl;
        page.ticketId = data.ticketId;
        const challenges = data.challenges;
        console.info(challenges);
        if (challenges.length) {
          for (let i = 0; i < challenges.length; i++) {
            const item = challenges[i];
            item.timeFromNow = request.formatTime(parseInt(item.createTime, 10));
            item.self = page.$parent.globalData.userInfo.avatarUrl === item.challengeOwnerAvatarUrl;
            page.challenges.push(item);
          }
        }
        page.$apply();
        //--------------------赋值页面------------------
      }).then(() => {
        //解锁页面
        wepy.hideLoading();
      }).catch(error => {
        console.error('display.onLoad.catch: 发生错误！');
        console.error(error)
        wepy.navigateBack({
          success() {
            page.config.showError('Err401', error)
          }
        })
      });
    }
    onReady() {}
    onReachBottom() {
      const page = this;
      if (!page.onBottom) {
        wx.showNavigationBarLoading();
        wx.showLoading({
          title: '载入中...',
        })
        new Promise((resolve, reject) => {
          request.retrieveData(this, page.ticketId, 'ticket', {
              'page': ++this.currentPage
            },
            successData => {
              console.log('display.onReachBottom: 加载分页数据， 第  ' + (page.currentPage + 1) + '  页。');
              resolve(successData.challenges);
            },
            error => {
              reject(error)
            });
        }).then(challenges => {
          if (challenges.length) {
            //分页数据存在， 准备展示
            console.log(challenges);
            for (let i = 0; i < challenges.length; i++) {
              const item = challenges[i];
              item.timeFromNow = request.formatTime(parseInt(item.createTime, 10));
              item.self = page.$parent.globalData.userInfo.avatarUrl === item.challengeOwnerAvatarUrl;
              page.challenges.push(item);
              page.$apply();
            }
            return;
          }
          // 没有分页数据了，
          page.onBottom = true;
          page.$apply();
        }).then(() => {
          // 解除加载
          wx.hideNavigationBarLoading();
          wx.hideLoading()
        }).catch(err => {
          page.config.showError('Err402', err)
        })
      }
    }
    onPullDownRefresh() {
      wx.stopPullDownRefresh();
      const page = this;
      wx.showNavigationBarLoading();
      wx.showLoading({
        title: '正在加载...',
        mask: 'true'
      });
      new Promise(resolve => {
        if (page.challenges.length > 0) {
          request.retrieveData(page, page.challenges[0].challengeId, 'challenge',
            page.challenges.length ? {
              'isUpdate': true,
              'utilWhen': page.challenges[0].createTime
            } : null,
            data => {
              resolve(data);
              console.log('display.onPullDownRefresh : 取得challenge更新，准备展示', data);
            },
            error => {
              throw error;
            }
          );
        } else {
          request.retrieveData(this, page.ticketId, 'ticket', {
              'page': this.currentPage
            },
            successData => {
              console.log('display.onReachBottom: 加载分页数据， 第  ' + page.currentPage + '  页。');
              resolve(successData.challenges);
            },
            error => {
              reject(error)
            });
        }
      }).then(challenges => {
        if (challenges.length > 0) {
          for (let i = challenges.length - 1; i >= 0; i--) {
            const data = challenges[i];
            data.timeFromNow = request.formatTime(parseInt(data.createTime, 10));
            data.self = page.$parent.globalData.userInfo.avatarUrl === data.challengeOwnerAvatarUrl;
            page.challenges.splice(0, 0, data);
            page.$apply();
          }
        }
      }).catch(error => {
        page.config.showError('Err403', error)
        console.error(error);
      }).then(() => {
        wx.hideNavigationBarLoading();
        wx.hideLoading();
      })
    }
  }
</script>
